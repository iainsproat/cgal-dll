#summary Notes on why the wrapper is designed as it is

= Introduction =

CGAL relies heavily on templates, which cannot be exported.  This has meant that we are unable to expose and use CGAL in other languages in the _exact_ same way we would with C++. 

When we attempted to wrap the templates in functions within a header, we experienced some errors (see below, [#The_problem_with_wrapping_template_functions the problem with wrapping template functions] ).

Putting the functions inside a class works, so we're going to wrap it that way.



====The problem with wrapping template functions====
For a header file of:

{{{
#ifndef CONVEXHULL_H
#define CONVEXHULL_H

#include "common.h"
#include <CGAL/Exact_predicates_inexact_constructions_kernel.h>

typedef CGAL::Exact_predicates_inexact_constructions_kernel K;
typedef std::vector<K::Point_2> Points;
typedef Points::iterator ForwardIterator;
typedef std::back_insert_iterator<Points> OutputIterator;

namespace CGAL_DLL
{
	CGALDLL_API OutputIterator convex_hull_2(ForwardIterator first, ForwardIterator last, 
		OutputIterator  result);
}

#endif
}}}

and a cpp of:

{{{
#include "../include/convex_hull_2.h"
#include <CGAL/convex_hull_2.h>
#include <CGAL/Exact_predicates_inexact_constructions_kernel.h>

typedef CGAL::Exact_predicates_inexact_constructions_kernel K;
typedef std::vector<K::Point_2> Points;
typedef Points::iterator ForwardIterator;
typedef std::back_insert_iterator<Points> OutputIterator;

CGALDLL_API OutputIterator  CGAL_DLL::convex_hull_2 (ForwardIterator first, ForwardIterator last, 
              OutputIterator  result)
{
	return CGAL::convex_hull_2<ForwardIterator, OutputIterator>( first, last, result);
}
}}}

and a quick test application of:

{{{
#include <CGAL/Exact_predicates_inexact_constructions_kernel.h>
#include <convex_hull_2.h>

#include <vector>
using namespace std;

typedef CGAL::Exact_predicates_inexact_constructions_kernel K;
typedef K::Point_2 Point_2;
typedef std::vector<Point_2> Points;

int main()
{
  Points points, result;

  points.push_back(Point_2(0,0));
  points.push_back(Point_2(10,0));
  points.push_back(Point_2(10,10));
  points.push_back(Point_2(6,5));
  points.push_back(Point_2(4,1));


  CGAL_DLL::convex_hull_2( points.begin(), points.end(), std::back_inserter(result) );
  std::cout << result.size() << " points on the convex hull" << std::endl;
  return 0;
}
}}}

The following error would be thrown:

{{{
error LNK2019: unresolved external symbol "__declspec(dllimport) class std::back_insert_iterator<class std::vector<class CGAL::Point_2<class CGAL::Epick>,class std::allocator<class CGAL::Point_2<class CGAL::Epick> > > > __cdecl CGAL_DLL::convex_hull_2(class std::_Vector_iterator<class std::_Vector_val<class CGAL::Point_2<class CGAL::Epick>,class std::allocator<class CGAL::Point_2<classCGAL::Epick> > > >,class std::_Vector_iterator<class std::_Vector_val<class CGAL::Point_2<class CGAL::Epick>,class std::allocator<class CGAL::Point_2<class CGAL::Epick> > > >,class std::back_insert_iterator<class std::vector<class CGAL::Point_2<class CGAL::Epick>,class std::allocator<class CGAL::Point_2<class CGAL::Epick> > > >)" (__imp_?convex_hull_2@CGAL_DLL@@YA?AV?$back_insert_iterator@V?$vector@V?$Point_2@VEpick@CGAL@@@CGAL@@V?$allocator@V?$Point_2@VEpick@CGAL@@@CGAL@@@std@@@std@@@std@@V?$_Vector_iterator@V?$_Vector_val@V?$Point_2@VEpick@CGAL@@@CGAL@@V?$allocator@V?$Point_2@VEpick@CGAL@@@CGAL@@@std@@@std@@@3@0V23@@Z) referenced in function _main
}}}